Push content
===============

With this package it is possible to synch object types from one site to another.
This doctest gives an overview about pushing content to be synchronized.

Setting up
----------

Some necessary imports and initializations. 

    >>> from DateTime import DateTime

Create a Document, which will be used for synching, remembering the UID and Create 
some data, like title and description, which we can test against.


    >>> _ = folder.invokeFactory(id='mydoc', type_name='Document')
    >>> doc = folder[_]
    >>> doc._at_rename_after_creation = False
    >>> mydata = dict(id='mydoc', title='doctitle', description='docdescription')
    >>> doc.processForm(data=1, values=mydata)
    >>> doc.id
    'mydoc'
    >>> doc_uid = doc.UID()


Testing the BrowserView
-----------------------

    >>> bv = doc.restrictedTraverse('synchronize_content')
    >>> from slc.synchronizer.interfaces import IAccessStorage, IDataExtractor
    >>> from Testing.makerequest import makerequest
    >>> app = makerequest(app) 
    >>> targetfolderid = folder.invokeFactory(id='target', type_name='Folder')
    >>> from Products.PloneTestCase.setup import portal_owner, default_password
    >>> app.REQUEST.set('username', portal_owner)
    >>> app.REQUEST.set('password', default_password)
    >>> app.REQUEST.set('server', "%s/%s" %(folder.absolute_url(), targetfolderid))
    
First we extract the data from our document to have it sent to the targetfolder.

    >>> extractor = IDataExtractor(doc)
    >>> syncstatus = bv.syncObject(extractor.portal_type(), 
    ...                            extractor.data(), 
    ...                            remote_uid=doc.UID(), 
    ...                            translation_reference_uid=bv._get_trans(doc))

We cannot test xmlrpc here, so we get an error
    >>> syncstatus[0]
    2

